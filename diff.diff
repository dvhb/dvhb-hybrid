diff --git a/dvhb_hybrid/users/admin.py b/dvhb_hybrid/users/admin.py
index bad953f..b3dd22f 100644
--- a/dvhb_hybrid/users/admin.py
+++ b/dvhb_hybrid/users/admin.py
@@ -1,9 +1,52 @@
 from django.contrib import admin
 from django.contrib.auth.admin import UserAdmin as DjangoUserAdmin
+from django.contrib.auth.forms import UserChangeForm
+from django.core.files.images import get_image_dimensions
+from django.core.files.uploadedfile import UploadedFile
+from django.forms import forms
 from django.utils.translation import ugettext_lazy as _
 
+from .models import AbstractUser
+
+
+class UserForm(UserChangeForm):
+    class Meta:
+        model = AbstractUser
+        fields = '__all__'
+
+    def clean_picture(self):
+        """
+        Implements validation of new user picture uploaded
+        """
+
+        picture = self.cleaned_data.get('picture')
+
+        # New picture has been uploaded
+        if picture and isinstance(picture, UploadedFile):
+            # Validate content type
+            main, sub = picture.content_type.split('/')
+            if not (main == 'image' and sub in ['jpeg', 'pjpeg', 'gif', 'png']):
+                raise forms.ValidationError(
+                    _('Please use a JPEG, GIF or PNG image.'))
+
+            w, h = get_image_dimensions(picture)
+
+            # Validate picture dimensions
+            max_width = max_height = 1024
+            if w > max_width or h > max_height:
+                raise forms.ValidationError(
+                    _('Please use an image that is %sx%s pixels or smaller.' % (max_width, max_height)))
+
+            # Validate file size
+            if len(picture) > (500 * 1024):
+                raise forms.ValidationError(
+                    _('User picture size may not exceed 500 kB.'))
+
+        return picture
+
 
 class BaseUserAdmin(DjangoUserAdmin):
+    form = UserForm
     fieldsets = (
         (None, {'fields': ('email', 'password')}),
         (_('Personal info'), {'fields': ('first_name', 'last_name')}),
diff --git a/dvhb_hybrid/users/amodels.py b/dvhb_hybrid/users/amodels.py
index f92ea62..0ae74c0 100644
--- a/dvhb_hybrid/users/amodels.py
+++ b/dvhb_hybrid/users/amodels.py
@@ -66,6 +66,9 @@ class AbstractUser(Model):
         profile_data = dict()
         for f in self.user_profile_fields:
             profile_data[f] = getattr(self, f)
+        if self.picture:
+            profile_data['picture'] = self.picture
+        self.prepare_image(profile_data)
         return profile_data
 
     @method_connect_once
@@ -79,6 +82,21 @@ class AbstractUser(Model):
         if need_update:
             await self.save(fields=need_update, connection=connection)
 
+    def prepare_image(self, result=None):
+        if not self.get('image'):
+            return
+        if result is None:
+            result = self
+        result['image_uuid'] = utils.get_uuid4(self.image, match=False)
+        for k, v in (
+                ('image_150', 'hybrid.files:image:processor'),
+                ('image_150_2x', 'hybrid.files:image_2x:processor')):
+            result[k] = self.app.router[v].url_for(
+                uuid=result['image_uuid'],
+                processor='size',
+                width=150, height=150,
+                ext='jpg')
+
 
 class BaseAbstractConfirmationRequest(Model):
     primary_key = 'uuid'
diff --git a/dvhb_hybrid/users/models.py b/dvhb_hybrid/users/models.py
index 0d9ac46..fbdd270 100644
--- a/dvhb_hybrid/users/models.py
+++ b/dvhb_hybrid/users/models.py
@@ -67,6 +67,8 @@ class AbstractUser(AbstractBaseUser, PermissionsMixin):
         ),
     )
 
+    picture = models.ImageField(_('user picture'), upload_to='user_pictures', blank=True, null=True)
+
     date_joined = models.DateTimeField(_('registration date'), default=timezone.now)
     date_deleted = models.DateTimeField(_('removing date'), null=True, blank=True)
 
diff --git a/dvhb_hybrid/users/swagger/profile.yaml b/dvhb_hybrid/users/swagger/profile.yaml
index 4300a1b..f87f567 100644
--- a/dvhb_hybrid/users/swagger/profile.yaml
+++ b/dvhb_hybrid/users/swagger/profile.yaml
@@ -68,3 +68,48 @@ paths:
           description: OK
         400:
           description: Invalid parameters given
+
+  /profile/image:
+    $name: dvhb_hybrid.user:profile.image
+    post:
+      $handler: dvhb_hybrid.users.views.ProfileImage.post
+      tags:
+        - user
+      summary: Change user picture
+      description: Replaces old picture (if any) with new one
+
+      consumes:
+        - multipart/form-data
+
+      parameters:
+        - name: picture_file
+          in: formData
+          description: User picture file
+          required: true
+          type: file
+
+      produces:
+        - application/json
+
+      security:
+      - UserSecurity: []
+
+      responses:
+        200:
+          description: OK
+          schema:
+            type: object
+        409:
+          description: Inactive user
+    delete:
+      $handler: dvhb_hybrid.users.views.ProfileImage.delete
+      tags:
+        - user
+      summary: Remove user picture
+      security:
+      - UserSecurity: []
+      responses:
+        200:
+          description: OK
+        409:
+          description: No user picture has been set
diff --git a/dvhb_hybrid/users/views.py b/dvhb_hybrid/users/views.py
index b95c5d4..8e5af00 100644
--- a/dvhb_hybrid/users/views.py
+++ b/dvhb_hybrid/users/views.py
@@ -131,3 +131,29 @@ async def patch_profile(request, profile_data):
     user = request.user
     await user.patch_profile(profile_data)
     return await user.get_profile()
+
+
+class ProfileImage:
+    @permissions
+    async def post(self, request, picture_file, connection=None):
+        user = request.user
+        Image = request.app.m.image
+        new_picture = await Image.from_field(picture_file, user=user, connection=connection)
+        old_picture = user.picture
+        user['picture'] = new_picture.image
+        await user.save(fields=['picture'], connection=connection)
+        if old_picture:
+            await Image.delete_name(old_picture, connection=connection)
+        user.prepare_image(new_picture)
+        return new_picture
+
+    @permissions
+    async def delete(self, connection=None):
+        user = self.request.user
+        Image = self.request.app.m.image
+        old_picture = user.picture
+        if not old_picture:
+            raise exceptions.HTTPConflict(reason="No user picture has been set")
+        user['picture'] = None
+        await user.save(fields=['picture'], connection=connection)
+        await Image.delete_name(old_picture, connection=connection)
diff --git a/setup.py b/setup.py
index 06bafef..849bad3 100644
--- a/setup.py
+++ b/setup.py
@@ -36,5 +36,6 @@ setup(
         'aiohttp_apiset',
         'sqlalchemy',
         'pyyaml',
+        'Pillow',
     ]
 )
